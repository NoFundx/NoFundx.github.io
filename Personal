#ifndef BTC_ADDRESS_VALIDATOR_HPP
#define BTC_ADDRESS_VALIDATOR_HPP

#include <array>
#include <string_view>
#include <cstdint>

namespace btc {

// -------- Base58 & Format Validation --------
constexpr std::string_view base58_chars = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";

constexpr bool is_base58_char(char c) {
    return base58_chars.find(c) != std::string_view::npos;
}

constexpr bool is_valid_btc_format(std::string_view addr) {
    if (addr.size() < 26 || addr.size() > 35) return false;
    if (addr[0] != '1' && addr[0] != '3') return false;
    for (char c : addr)
        if (!is_base58_char(c)) return false;
    return true;
}

// -------- Compile-Time SHA-256 (Single Block) --------
constexpr std::array<uint32_t, 64> k = {
    0x428a2f98,0x71374491,0xb5c0fbcf,0xe9b5dba5,0x3956c25b,0x59f111f1,0x923f82a4,0xab1c5ed5,
    0xd807aa98,0x12835b01,0x243185be,0x550c7dc3,0x72be5d74,0x80deb1fe,0x9bdc06a7,0xc19bf174,
    0xe49b69c1,0xefbe4786,0x0fc19dc6,0x240ca1cc,0x2de92c6f,0x4a7484aa,0x5cb0a9dc,0x76f988da,
    0x983e5152,0xa831c66d,0xb00327c8,0xbf597fc7,0xc6e00bf3,0xd5a79147,0x06ca6351,0x14292967,
    0x27b70a85,0x2e1b2138,0x4d2c6dfc,0x53380d13,0x650a7354,0x766a0abb,0x81c2c92e,0x92722c85,
    0xa2bfe8a1,0xa81a664b,0xc24b8b70,0xc76c51a3,0xd192e819,0xd6990624,0xf40e3585,0x106aa070,
    0x19a4c116,0x1e376c08,0x2748774c,0x34b0bcb5,0x391c0cb3,0x4ed8aa4a,0x5b9cca4f,0x682e6ff3,
    0x748f82ee,0x78a5636f,0x84c87814,0x8cc70208,0x90befffa,0xa4506ceb,0xbef9a3f7,0xc67178f2
};

constexpr uint32_t rotr(uint32_t x, uint32_t n) {
    return (x >> n) | (x << (32 - n));
}

constexpr std::array<uint8_t, 64> pad_message(std::string_view input) {
    std::array<uint8_t, 64> block{};
    size_t len = input.size();
    for (size_t i = 0; i < len; ++i) block[i] = static_cast<uint8_t>(input[i]);
    block[len] = 0x80;
    uint64_t bit_len = len * 8;
    block[63] = static_cast<uint8_t>(bit_len);
    block[62] = static_cast<uint8_t>(bit_len >> 8);
    block[61] = static_cast<uint8_t>(bit_len >> 16);
    block[60] = static_cast<uint8_t>(bit_len >> 24);
    return block;
}

constexpr std::array<uint8_t, 32> sha256(std::string_view input) {
    std::array<uint32_t, 8> h = {
        0x6a09e667,0xbb67ae85,0x3c6ef372,0xa54ff53a,
        0x510e527f,0x9b05688c,0x1f83d9ab,0x5be0cd19
    };

    auto block = pad_message(input);
    std::array<uint32_t, 64> w{};

    for (int i = 0; i < 16; ++i)
        w[i] = (block[i*4] << 24) | (block[i*4+1] << 16) | (block[i*4+2] << 8) | block[i*4+3];

    for (int i = 16; i < 64; ++i) {
        auto s0 = rotr(w[i-15], 7) ^ rotr(w[i-15], 18) ^ (w[i-15] >> 3);
        auto s1 = rotr(w[i-2], 17) ^ rotr(w[i-2], 19) ^ (w[i-2] >> 10);
        w[i] = w[i-16] + s0 + w[i-7] + s1;
    }

    uint32_t a=h[0],b=h[1],c=h[2],d=h[3],e=h[4],f=h[5],g=h[6],h0=h[7];
    for (int i = 0; i < 64; ++i) {
        auto S1 = rotr(e,6)^rotr(e,11)^rotr(e,25);
        auto ch = (e&f)^((~e)&g);
        auto temp1 = h0 + S1 + ch + k[i] + w[i];
        auto S0 = rotr(a,2)^rotr(a,13)^rotr(a,22);
        auto maj = (a&b)^(a&c)^(b&c);
        auto temp2 = S0 + maj;

        h0=g; g=f; f=e; e=d+temp1; d=c; c=b; b=a; a=temp1+temp2;
    }

    h[0]+=a; h[1]+=b; h[2]+=c; h[3]+=d;
    h[4]+=e; h[5]+=f; h[6]+=g; h[7]+=h0;

    std::array<uint8_t, 32> digest{};
    for (int i = 0; i < 8; ++i) {
        digest[i*4+0] = static_cast<uint8_t>(h[i] >> 24);
        digest[i*4+1] = static_cast<uint8_t>(h[i] >> 16);
        digest[i*4+2] = static_cast<uint8_t>(h[i] >> 8);
        digest[i*4+3] = static_cast<uint8_t>(h[i]);
    }
    return digest;
}

// -------- Base58Check Validation --------
constexpr std::array<uint8_t, 25> base58_decode(std::string_view addr) {
    std::array<uint8_t, 25> result{};
    for (char c : addr) {
        uint32_t carry = base58_chars.find(c);
        for (int i = 24; i >= 0; --i) {
            carry += 58 * result[i];
            result[i] = carry % 256;
            carry /= 256;
        }
    }
    return result;
}

constexpr bool validate_base58check(std::string_view addr) {
    if (!is_valid_btc_format(addr)) return false;
    auto decoded = base58_decode(addr);
    std::array<uint8_t, 21> payload{};
    for (int i = 0; i < 21; ++i) payload[i] = decoded[i];
    auto hash1 = sha256({reinterpret_cast<const char*>(payload.data()), 21});
    auto hash2 = sha256({reinterpret_cast<const char*>(hash1.data()), 32});
    for (int i = 0; i < 4; ++i)
        if (hash2[i] != decoded[21 + i]) return false;
    return true;
}

template<std::string_view Addr>
struct Base58CheckAddress {
    static_assert(validate_base58check(Addr), "Invalid Base58Check Bitcoin address");
};

} // namespace btc

#endif // BTC_ADDRESS_VALIDATOR_HPP
